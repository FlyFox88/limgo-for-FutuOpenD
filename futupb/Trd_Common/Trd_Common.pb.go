// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Trd_Common/Trd_Common.proto

package Trd_Common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "limgo/futupb/Common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 交易环境
type TrdEnv int32

const (
	TrdEnv_TrdEnv_Simulate TrdEnv = 0
	TrdEnv_TrdEnv_Real     TrdEnv = 1
)

var TrdEnv_name = map[int32]string{
	0: "TrdEnv_Simulate",
	1: "TrdEnv_Real",
}
var TrdEnv_value = map[string]int32{
	"TrdEnv_Simulate": 0,
	"TrdEnv_Real":     1,
}

func (x TrdEnv) Enum() *TrdEnv {
	p := new(TrdEnv)
	*p = x
	return p
}
func (x TrdEnv) String() string {
	return proto.EnumName(TrdEnv_name, int32(x))
}
func (x *TrdEnv) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdEnv_value, data, "TrdEnv")
	if err != nil {
		return err
	}
	*x = TrdEnv(value)
	return nil
}
func (TrdEnv) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{0}
}

// 交易市场，是大的市场，不是具体品种
type TrdMarket int32

const (
	TrdMarket_TrdMarket_Unknown TrdMarket = 0
	TrdMarket_TrdMarket_HK      TrdMarket = 1
	TrdMarket_TrdMarket_US      TrdMarket = 2
	TrdMarket_TrdMarket_CN      TrdMarket = 3
	TrdMarket_TrdMarket_HKCC    TrdMarket = 4
)

var TrdMarket_name = map[int32]string{
	0: "TrdMarket_Unknown",
	1: "TrdMarket_HK",
	2: "TrdMarket_US",
	3: "TrdMarket_CN",
	4: "TrdMarket_HKCC",
}
var TrdMarket_value = map[string]int32{
	"TrdMarket_Unknown": 0,
	"TrdMarket_HK":      1,
	"TrdMarket_US":      2,
	"TrdMarket_CN":      3,
	"TrdMarket_HKCC":    4,
}

func (x TrdMarket) Enum() *TrdMarket {
	p := new(TrdMarket)
	*p = x
	return p
}
func (x TrdMarket) String() string {
	return proto.EnumName(TrdMarket_name, int32(x))
}
func (x *TrdMarket) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdMarket_value, data, "TrdMarket")
	if err != nil {
		return err
	}
	*x = TrdMarket(value)
	return nil
}
func (TrdMarket) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{1}
}

// 交易方向
type TrdSide int32

const (
	// 客户端下单只传Buy或Sell即可，SellShort是服务器返回有此方向，BuyBack目前不存在，但也不排除服务器会传
	TrdSide_TrdSide_Unknown   TrdSide = 0
	TrdSide_TrdSide_Buy       TrdSide = 1
	TrdSide_TrdSide_Sell      TrdSide = 2
	TrdSide_TrdSide_SellShort TrdSide = 3
	TrdSide_TrdSide_BuyBack   TrdSide = 4
)

var TrdSide_name = map[int32]string{
	0: "TrdSide_Unknown",
	1: "TrdSide_Buy",
	2: "TrdSide_Sell",
	3: "TrdSide_SellShort",
	4: "TrdSide_BuyBack",
}
var TrdSide_value = map[string]int32{
	"TrdSide_Unknown":   0,
	"TrdSide_Buy":       1,
	"TrdSide_Sell":      2,
	"TrdSide_SellShort": 3,
	"TrdSide_BuyBack":   4,
}

func (x TrdSide) Enum() *TrdSide {
	p := new(TrdSide)
	*p = x
	return p
}
func (x TrdSide) String() string {
	return proto.EnumName(TrdSide_name, int32(x))
}
func (x *TrdSide) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdSide_value, data, "TrdSide")
	if err != nil {
		return err
	}
	*x = TrdSide(value)
	return nil
}
func (TrdSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{2}
}

// 订单类型
type OrderType int32

const (
	OrderType_OrderType_Unknown       OrderType = 0
	OrderType_OrderType_Normal        OrderType = 1
	OrderType_OrderType_Market        OrderType = 2
	OrderType_OrderType_AbsoluteLimit OrderType = 5
	OrderType_OrderType_Auction       OrderType = 6
	OrderType_OrderType_AuctionLimit  OrderType = 7
	OrderType_OrderType_SpecialLimit  OrderType = 8
)

var OrderType_name = map[int32]string{
	0: "OrderType_Unknown",
	1: "OrderType_Normal",
	2: "OrderType_Market",
	5: "OrderType_AbsoluteLimit",
	6: "OrderType_Auction",
	7: "OrderType_AuctionLimit",
	8: "OrderType_SpecialLimit",
}
var OrderType_value = map[string]int32{
	"OrderType_Unknown":       0,
	"OrderType_Normal":        1,
	"OrderType_Market":        2,
	"OrderType_AbsoluteLimit": 5,
	"OrderType_Auction":       6,
	"OrderType_AuctionLimit":  7,
	"OrderType_SpecialLimit":  8,
}

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}
func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (x *OrderType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderType_value, data, "OrderType")
	if err != nil {
		return err
	}
	*x = OrderType(value)
	return nil
}
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{3}
}

// 订单状态
type OrderStatus int32

const (
	OrderStatus_OrderStatus_Unsubmitted     OrderStatus = 0
	OrderStatus_OrderStatus_Unknown         OrderStatus = -1
	OrderStatus_OrderStatus_WaitingSubmit   OrderStatus = 1
	OrderStatus_OrderStatus_Submitting      OrderStatus = 2
	OrderStatus_OrderStatus_SubmitFailed    OrderStatus = 3
	OrderStatus_OrderStatus_TimeOut         OrderStatus = 4
	OrderStatus_OrderStatus_Submitted       OrderStatus = 5
	OrderStatus_OrderStatus_Filled_Part     OrderStatus = 10
	OrderStatus_OrderStatus_Filled_All      OrderStatus = 11
	OrderStatus_OrderStatus_Cancelling_Part OrderStatus = 12
	OrderStatus_OrderStatus_Cancelling_All  OrderStatus = 13
	OrderStatus_OrderStatus_Cancelled_Part  OrderStatus = 14
	OrderStatus_OrderStatus_Cancelled_All   OrderStatus = 15
	OrderStatus_OrderStatus_Failed          OrderStatus = 21
	OrderStatus_OrderStatus_Disabled        OrderStatus = 22
	OrderStatus_OrderStatus_Deleted         OrderStatus = 23
)

var OrderStatus_name = map[int32]string{
	0:  "OrderStatus_Unsubmitted",
	-1: "OrderStatus_Unknown",
	1:  "OrderStatus_WaitingSubmit",
	2:  "OrderStatus_Submitting",
	3:  "OrderStatus_SubmitFailed",
	4:  "OrderStatus_TimeOut",
	5:  "OrderStatus_Submitted",
	10: "OrderStatus_Filled_Part",
	11: "OrderStatus_Filled_All",
	12: "OrderStatus_Cancelling_Part",
	13: "OrderStatus_Cancelling_All",
	14: "OrderStatus_Cancelled_Part",
	15: "OrderStatus_Cancelled_All",
	21: "OrderStatus_Failed",
	22: "OrderStatus_Disabled",
	23: "OrderStatus_Deleted",
}
var OrderStatus_value = map[string]int32{
	"OrderStatus_Unsubmitted":     0,
	"OrderStatus_Unknown":         -1,
	"OrderStatus_WaitingSubmit":   1,
	"OrderStatus_Submitting":      2,
	"OrderStatus_SubmitFailed":    3,
	"OrderStatus_TimeOut":         4,
	"OrderStatus_Submitted":       5,
	"OrderStatus_Filled_Part":     10,
	"OrderStatus_Filled_All":      11,
	"OrderStatus_Cancelling_Part": 12,
	"OrderStatus_Cancelling_All":  13,
	"OrderStatus_Cancelled_Part":  14,
	"OrderStatus_Cancelled_All":   15,
	"OrderStatus_Failed":          21,
	"OrderStatus_Disabled":        22,
	"OrderStatus_Deleted":         23,
}

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}
func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (x *OrderStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderStatus_value, data, "OrderStatus")
	if err != nil {
		return err
	}
	*x = OrderStatus(value)
	return nil
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{4}
}

// 持仓方向类型
type PositionSide int32

const (
	PositionSide_PositionSide_Long    PositionSide = 0
	PositionSide_PositionSide_Unknown PositionSide = -1
	PositionSide_PositionSide_Short   PositionSide = 1
)

var PositionSide_name = map[int32]string{
	0:  "PositionSide_Long",
	-1: "PositionSide_Unknown",
	1:  "PositionSide_Short",
}
var PositionSide_value = map[string]int32{
	"PositionSide_Long":    0,
	"PositionSide_Unknown": -1,
	"PositionSide_Short":   1,
}

func (x PositionSide) Enum() *PositionSide {
	p := new(PositionSide)
	*p = x
	return p
}
func (x PositionSide) String() string {
	return proto.EnumName(PositionSide_name, int32(x))
}
func (x *PositionSide) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PositionSide_value, data, "PositionSide")
	if err != nil {
		return err
	}
	*x = PositionSide(value)
	return nil
}
func (PositionSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{5}
}

// 修改订单的操作类型
type ModifyOrderOp int32

const (
	// 港股支持全部操作，美股目前仅支持ModifyOrderOp_Normal和ModifyOrderOp_Cancel
	ModifyOrderOp_ModifyOrderOp_Unknown ModifyOrderOp = 0
	ModifyOrderOp_ModifyOrderOp_Normal  ModifyOrderOp = 1
	ModifyOrderOp_ModifyOrderOp_Cancel  ModifyOrderOp = 2
	ModifyOrderOp_ModifyOrderOp_Disable ModifyOrderOp = 3
	ModifyOrderOp_ModifyOrderOp_Enable  ModifyOrderOp = 4
	ModifyOrderOp_ModifyOrderOp_Delete  ModifyOrderOp = 5
)

var ModifyOrderOp_name = map[int32]string{
	0: "ModifyOrderOp_Unknown",
	1: "ModifyOrderOp_Normal",
	2: "ModifyOrderOp_Cancel",
	3: "ModifyOrderOp_Disable",
	4: "ModifyOrderOp_Enable",
	5: "ModifyOrderOp_Delete",
}
var ModifyOrderOp_value = map[string]int32{
	"ModifyOrderOp_Unknown": 0,
	"ModifyOrderOp_Normal":  1,
	"ModifyOrderOp_Cancel":  2,
	"ModifyOrderOp_Disable": 3,
	"ModifyOrderOp_Enable":  4,
	"ModifyOrderOp_Delete":  5,
}

func (x ModifyOrderOp) Enum() *ModifyOrderOp {
	p := new(ModifyOrderOp)
	*p = x
	return p
}
func (x ModifyOrderOp) String() string {
	return proto.EnumName(ModifyOrderOp_name, int32(x))
}
func (x *ModifyOrderOp) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ModifyOrderOp_value, data, "ModifyOrderOp")
	if err != nil {
		return err
	}
	*x = ModifyOrderOp(value)
	return nil
}
func (ModifyOrderOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{6}
}

// 需要再次确认订单的原因枚举
type ReconfirmOrderReason int32

const (
	ReconfirmOrderReason_ReconfirmOrderReason_Unknown       ReconfirmOrderReason = 0
	ReconfirmOrderReason_ReconfirmOrderReason_QtyTooLarge   ReconfirmOrderReason = 1
	ReconfirmOrderReason_ReconfirmOrderReason_PriceAbnormal ReconfirmOrderReason = 2
)

var ReconfirmOrderReason_name = map[int32]string{
	0: "ReconfirmOrderReason_Unknown",
	1: "ReconfirmOrderReason_QtyTooLarge",
	2: "ReconfirmOrderReason_PriceAbnormal",
}
var ReconfirmOrderReason_value = map[string]int32{
	"ReconfirmOrderReason_Unknown":       0,
	"ReconfirmOrderReason_QtyTooLarge":   1,
	"ReconfirmOrderReason_PriceAbnormal": 2,
}

func (x ReconfirmOrderReason) Enum() *ReconfirmOrderReason {
	p := new(ReconfirmOrderReason)
	*p = x
	return p
}
func (x ReconfirmOrderReason) String() string {
	return proto.EnumName(ReconfirmOrderReason_name, int32(x))
}
func (x *ReconfirmOrderReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReconfirmOrderReason_value, data, "ReconfirmOrderReason")
	if err != nil {
		return err
	}
	*x = ReconfirmOrderReason(value)
	return nil
}
func (ReconfirmOrderReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{7}
}

// 交易协议公共参数头
type TrdHeader struct {
	TrdEnv               *int32   `protobuf:"varint,1,req,name=trdEnv" json:"trdEnv,omitempty"`
	AccID                *uint64  `protobuf:"varint,2,req,name=accID" json:"accID,omitempty"`
	TrdMarket            *int32   `protobuf:"varint,3,req,name=trdMarket" json:"trdMarket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrdHeader) Reset()         { *m = TrdHeader{} }
func (m *TrdHeader) String() string { return proto.CompactTextString(m) }
func (*TrdHeader) ProtoMessage()    {}
func (*TrdHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{0}
}
func (m *TrdHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrdHeader.Unmarshal(m, b)
}
func (m *TrdHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrdHeader.Marshal(b, m, deterministic)
}
func (dst *TrdHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdHeader.Merge(dst, src)
}
func (m *TrdHeader) XXX_Size() int {
	return xxx_messageInfo_TrdHeader.Size(m)
}
func (m *TrdHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TrdHeader proto.InternalMessageInfo

func (m *TrdHeader) GetTrdEnv() int32 {
	if m != nil && m.TrdEnv != nil {
		return *m.TrdEnv
	}
	return 0
}

func (m *TrdHeader) GetAccID() uint64 {
	if m != nil && m.AccID != nil {
		return *m.AccID
	}
	return 0
}

func (m *TrdHeader) GetTrdMarket() int32 {
	if m != nil && m.TrdMarket != nil {
		return *m.TrdMarket
	}
	return 0
}

// 交易业务账户结构
type TrdAcc struct {
	TrdEnv               *int32   `protobuf:"varint,1,req,name=trdEnv" json:"trdEnv,omitempty"`
	AccID                *uint64  `protobuf:"varint,2,req,name=accID" json:"accID,omitempty"`
	TrdMarketAuthList    []int32  `protobuf:"varint,3,rep,name=trdMarketAuthList" json:"trdMarketAuthList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrdAcc) Reset()         { *m = TrdAcc{} }
func (m *TrdAcc) String() string { return proto.CompactTextString(m) }
func (*TrdAcc) ProtoMessage()    {}
func (*TrdAcc) Descriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{1}
}
func (m *TrdAcc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrdAcc.Unmarshal(m, b)
}
func (m *TrdAcc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrdAcc.Marshal(b, m, deterministic)
}
func (dst *TrdAcc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdAcc.Merge(dst, src)
}
func (m *TrdAcc) XXX_Size() int {
	return xxx_messageInfo_TrdAcc.Size(m)
}
func (m *TrdAcc) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdAcc.DiscardUnknown(m)
}

var xxx_messageInfo_TrdAcc proto.InternalMessageInfo

func (m *TrdAcc) GetTrdEnv() int32 {
	if m != nil && m.TrdEnv != nil {
		return *m.TrdEnv
	}
	return 0
}

func (m *TrdAcc) GetAccID() uint64 {
	if m != nil && m.AccID != nil {
		return *m.AccID
	}
	return 0
}

func (m *TrdAcc) GetTrdMarketAuthList() []int32 {
	if m != nil {
		return m.TrdMarketAuthList
	}
	return nil
}

// 账户资金结构
type Funds struct {
	Power                *float64 `protobuf:"fixed64,1,req,name=power" json:"power,omitempty"`
	TotalAssets          *float64 `protobuf:"fixed64,2,req,name=totalAssets" json:"totalAssets,omitempty"`
	Cash                 *float64 `protobuf:"fixed64,3,req,name=cash" json:"cash,omitempty"`
	MarketVal            *float64 `protobuf:"fixed64,4,req,name=marketVal" json:"marketVal,omitempty"`
	FrozenCash           *float64 `protobuf:"fixed64,5,req,name=frozenCash" json:"frozenCash,omitempty"`
	DebtCash             *float64 `protobuf:"fixed64,6,req,name=debtCash" json:"debtCash,omitempty"`
	AvlWithdrawalCash    *float64 `protobuf:"fixed64,7,req,name=avlWithdrawalCash" json:"avlWithdrawalCash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Funds) Reset()         { *m = Funds{} }
func (m *Funds) String() string { return proto.CompactTextString(m) }
func (*Funds) ProtoMessage()    {}
func (*Funds) Descriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{2}
}
func (m *Funds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Funds.Unmarshal(m, b)
}
func (m *Funds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Funds.Marshal(b, m, deterministic)
}
func (dst *Funds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funds.Merge(dst, src)
}
func (m *Funds) XXX_Size() int {
	return xxx_messageInfo_Funds.Size(m)
}
func (m *Funds) XXX_DiscardUnknown() {
	xxx_messageInfo_Funds.DiscardUnknown(m)
}

var xxx_messageInfo_Funds proto.InternalMessageInfo

func (m *Funds) GetPower() float64 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

func (m *Funds) GetTotalAssets() float64 {
	if m != nil && m.TotalAssets != nil {
		return *m.TotalAssets
	}
	return 0
}

func (m *Funds) GetCash() float64 {
	if m != nil && m.Cash != nil {
		return *m.Cash
	}
	return 0
}

func (m *Funds) GetMarketVal() float64 {
	if m != nil && m.MarketVal != nil {
		return *m.MarketVal
	}
	return 0
}

func (m *Funds) GetFrozenCash() float64 {
	if m != nil && m.FrozenCash != nil {
		return *m.FrozenCash
	}
	return 0
}

func (m *Funds) GetDebtCash() float64 {
	if m != nil && m.DebtCash != nil {
		return *m.DebtCash
	}
	return 0
}

func (m *Funds) GetAvlWithdrawalCash() float64 {
	if m != nil && m.AvlWithdrawalCash != nil {
		return *m.AvlWithdrawalCash
	}
	return 0
}

// 账户持仓结构
type Position struct {
	PositionID   *uint64  `protobuf:"varint,1,req,name=positionID" json:"positionID,omitempty"`
	PositionSide *int32   `protobuf:"varint,2,req,name=positionSide" json:"positionSide,omitempty"`
	Code         *string  `protobuf:"bytes,3,req,name=code" json:"code,omitempty"`
	Name         *string  `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	Qty          *float64 `protobuf:"fixed64,5,req,name=qty" json:"qty,omitempty"`
	CanSellQty   *float64 `protobuf:"fixed64,6,req,name=canSellQty" json:"canSellQty,omitempty"`
	Price        *float64 `protobuf:"fixed64,7,req,name=price" json:"price,omitempty"`
	CostPrice    *float64 `protobuf:"fixed64,8,opt,name=costPrice" json:"costPrice,omitempty"`
	Val          *float64 `protobuf:"fixed64,9,req,name=val" json:"val,omitempty"`
	PlVal        *float64 `protobuf:"fixed64,10,req,name=plVal" json:"plVal,omitempty"`
	PlRatio      *float64 `protobuf:"fixed64,11,opt,name=plRatio" json:"plRatio,omitempty"`
	// 以下是此持仓今日统计
	TdPlVal              *float64 `protobuf:"fixed64,21,opt,name=td_plVal,json=tdPlVal" json:"td_plVal,omitempty"`
	TdTrdVal             *float64 `protobuf:"fixed64,22,opt,name=td_trdVal,json=tdTrdVal" json:"td_trdVal,omitempty"`
	TdBuyVal             *float64 `protobuf:"fixed64,23,opt,name=td_buyVal,json=tdBuyVal" json:"td_buyVal,omitempty"`
	TdBuyQty             *float64 `protobuf:"fixed64,24,opt,name=td_buyQty,json=tdBuyQty" json:"td_buyQty,omitempty"`
	TdSellVal            *float64 `protobuf:"fixed64,25,opt,name=td_sellVal,json=tdSellVal" json:"td_sellVal,omitempty"`
	TdSellQty            *float64 `protobuf:"fixed64,26,opt,name=td_sellQty,json=tdSellQty" json:"td_sellQty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{3}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Position.Unmarshal(m, b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Position.Marshal(b, m, deterministic)
}
func (dst *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(dst, src)
}
func (m *Position) XXX_Size() int {
	return xxx_messageInfo_Position.Size(m)
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetPositionID() uint64 {
	if m != nil && m.PositionID != nil {
		return *m.PositionID
	}
	return 0
}

func (m *Position) GetPositionSide() int32 {
	if m != nil && m.PositionSide != nil {
		return *m.PositionSide
	}
	return 0
}

func (m *Position) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *Position) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Position) GetQty() float64 {
	if m != nil && m.Qty != nil {
		return *m.Qty
	}
	return 0
}

func (m *Position) GetCanSellQty() float64 {
	if m != nil && m.CanSellQty != nil {
		return *m.CanSellQty
	}
	return 0
}

func (m *Position) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Position) GetCostPrice() float64 {
	if m != nil && m.CostPrice != nil {
		return *m.CostPrice
	}
	return 0
}

func (m *Position) GetVal() float64 {
	if m != nil && m.Val != nil {
		return *m.Val
	}
	return 0
}

func (m *Position) GetPlVal() float64 {
	if m != nil && m.PlVal != nil {
		return *m.PlVal
	}
	return 0
}

func (m *Position) GetPlRatio() float64 {
	if m != nil && m.PlRatio != nil {
		return *m.PlRatio
	}
	return 0
}

func (m *Position) GetTdPlVal() float64 {
	if m != nil && m.TdPlVal != nil {
		return *m.TdPlVal
	}
	return 0
}

func (m *Position) GetTdTrdVal() float64 {
	if m != nil && m.TdTrdVal != nil {
		return *m.TdTrdVal
	}
	return 0
}

func (m *Position) GetTdBuyVal() float64 {
	if m != nil && m.TdBuyVal != nil {
		return *m.TdBuyVal
	}
	return 0
}

func (m *Position) GetTdBuyQty() float64 {
	if m != nil && m.TdBuyQty != nil {
		return *m.TdBuyQty
	}
	return 0
}

func (m *Position) GetTdSellVal() float64 {
	if m != nil && m.TdSellVal != nil {
		return *m.TdSellVal
	}
	return 0
}

func (m *Position) GetTdSellQty() float64 {
	if m != nil && m.TdSellQty != nil {
		return *m.TdSellQty
	}
	return 0
}

// 订单结构
type Order struct {
	TrdSide              *int32   `protobuf:"varint,1,req,name=trdSide" json:"trdSide,omitempty"`
	OrderType            *int32   `protobuf:"varint,2,req,name=orderType" json:"orderType,omitempty"`
	OrderStatus          *int32   `protobuf:"varint,3,req,name=orderStatus" json:"orderStatus,omitempty"`
	OrderID              *uint64  `protobuf:"varint,4,req,name=orderID" json:"orderID,omitempty"`
	OrderIDEx            *string  `protobuf:"bytes,5,req,name=orderIDEx" json:"orderIDEx,omitempty"`
	Code                 *string  `protobuf:"bytes,6,req,name=code" json:"code,omitempty"`
	Name                 *string  `protobuf:"bytes,7,req,name=name" json:"name,omitempty"`
	Qty                  *float64 `protobuf:"fixed64,8,req,name=qty" json:"qty,omitempty"`
	Price                *float64 `protobuf:"fixed64,9,opt,name=price" json:"price,omitempty"`
	CreateTime           *string  `protobuf:"bytes,10,req,name=createTime" json:"createTime,omitempty"`
	UpdateTime           *string  `protobuf:"bytes,11,req,name=updateTime" json:"updateTime,omitempty"`
	FillQty              *float64 `protobuf:"fixed64,12,opt,name=fillQty" json:"fillQty,omitempty"`
	FillAvgPrice         *float64 `protobuf:"fixed64,13,opt,name=fillAvgPrice" json:"fillAvgPrice,omitempty"`
	LastErrMsg           *string  `protobuf:"bytes,14,opt,name=lastErrMsg" json:"lastErrMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{4}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (dst *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(dst, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetTrdSide() int32 {
	if m != nil && m.TrdSide != nil {
		return *m.TrdSide
	}
	return 0
}

func (m *Order) GetOrderType() int32 {
	if m != nil && m.OrderType != nil {
		return *m.OrderType
	}
	return 0
}

func (m *Order) GetOrderStatus() int32 {
	if m != nil && m.OrderStatus != nil {
		return *m.OrderStatus
	}
	return 0
}

func (m *Order) GetOrderID() uint64 {
	if m != nil && m.OrderID != nil {
		return *m.OrderID
	}
	return 0
}

func (m *Order) GetOrderIDEx() string {
	if m != nil && m.OrderIDEx != nil {
		return *m.OrderIDEx
	}
	return ""
}

func (m *Order) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *Order) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Order) GetQty() float64 {
	if m != nil && m.Qty != nil {
		return *m.Qty
	}
	return 0
}

func (m *Order) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Order) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

func (m *Order) GetUpdateTime() string {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return ""
}

func (m *Order) GetFillQty() float64 {
	if m != nil && m.FillQty != nil {
		return *m.FillQty
	}
	return 0
}

func (m *Order) GetFillAvgPrice() float64 {
	if m != nil && m.FillAvgPrice != nil {
		return *m.FillAvgPrice
	}
	return 0
}

func (m *Order) GetLastErrMsg() string {
	if m != nil && m.LastErrMsg != nil {
		return *m.LastErrMsg
	}
	return ""
}

// 成交结构
type OrderFill struct {
	TrdSide              *int32   `protobuf:"varint,1,req,name=trdSide" json:"trdSide,omitempty"`
	FillID               *uint64  `protobuf:"varint,2,req,name=fillID" json:"fillID,omitempty"`
	FillIDEx             *string  `protobuf:"bytes,3,req,name=fillIDEx" json:"fillIDEx,omitempty"`
	OrderID              *uint64  `protobuf:"varint,4,opt,name=orderID" json:"orderID,omitempty"`
	OrderIDEx            *string  `protobuf:"bytes,5,opt,name=orderIDEx" json:"orderIDEx,omitempty"`
	Code                 *string  `protobuf:"bytes,6,req,name=code" json:"code,omitempty"`
	Name                 *string  `protobuf:"bytes,7,req,name=name" json:"name,omitempty"`
	Qty                  *float64 `protobuf:"fixed64,8,req,name=qty" json:"qty,omitempty"`
	Price                *float64 `protobuf:"fixed64,9,req,name=price" json:"price,omitempty"`
	CreateTime           *string  `protobuf:"bytes,10,req,name=createTime" json:"createTime,omitempty"`
	CounterBrokerID      *int32   `protobuf:"varint,11,opt,name=counterBrokerID" json:"counterBrokerID,omitempty"`
	CounterBrokerName    *string  `protobuf:"bytes,12,opt,name=counterBrokerName" json:"counterBrokerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderFill) Reset()         { *m = OrderFill{} }
func (m *OrderFill) String() string { return proto.CompactTextString(m) }
func (*OrderFill) ProtoMessage()    {}
func (*OrderFill) Descriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{5}
}
func (m *OrderFill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderFill.Unmarshal(m, b)
}
func (m *OrderFill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderFill.Marshal(b, m, deterministic)
}
func (dst *OrderFill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFill.Merge(dst, src)
}
func (m *OrderFill) XXX_Size() int {
	return xxx_messageInfo_OrderFill.Size(m)
}
func (m *OrderFill) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFill.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFill proto.InternalMessageInfo

func (m *OrderFill) GetTrdSide() int32 {
	if m != nil && m.TrdSide != nil {
		return *m.TrdSide
	}
	return 0
}

func (m *OrderFill) GetFillID() uint64 {
	if m != nil && m.FillID != nil {
		return *m.FillID
	}
	return 0
}

func (m *OrderFill) GetFillIDEx() string {
	if m != nil && m.FillIDEx != nil {
		return *m.FillIDEx
	}
	return ""
}

func (m *OrderFill) GetOrderID() uint64 {
	if m != nil && m.OrderID != nil {
		return *m.OrderID
	}
	return 0
}

func (m *OrderFill) GetOrderIDEx() string {
	if m != nil && m.OrderIDEx != nil {
		return *m.OrderIDEx
	}
	return ""
}

func (m *OrderFill) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *OrderFill) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *OrderFill) GetQty() float64 {
	if m != nil && m.Qty != nil {
		return *m.Qty
	}
	return 0
}

func (m *OrderFill) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *OrderFill) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

func (m *OrderFill) GetCounterBrokerID() int32 {
	if m != nil && m.CounterBrokerID != nil {
		return *m.CounterBrokerID
	}
	return 0
}

func (m *OrderFill) GetCounterBrokerName() string {
	if m != nil && m.CounterBrokerName != nil {
		return *m.CounterBrokerName
	}
	return ""
}

// 过滤条件，条件组合是"与"不是"或"，用于获取订单、成交、持仓等时二次过滤
type TrdFilterConditions struct {
	CodeList             []string `protobuf:"bytes,1,rep,name=codeList" json:"codeList,omitempty"`
	IdList               []uint64 `protobuf:"varint,2,rep,name=idList" json:"idList,omitempty"`
	BeginTime            *string  `protobuf:"bytes,3,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime              *string  `protobuf:"bytes,4,opt,name=endTime" json:"endTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrdFilterConditions) Reset()         { *m = TrdFilterConditions{} }
func (m *TrdFilterConditions) String() string { return proto.CompactTextString(m) }
func (*TrdFilterConditions) ProtoMessage()    {}
func (*TrdFilterConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_Trd_Common_215a3e1001e11cd9, []int{6}
}
func (m *TrdFilterConditions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrdFilterConditions.Unmarshal(m, b)
}
func (m *TrdFilterConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrdFilterConditions.Marshal(b, m, deterministic)
}
func (dst *TrdFilterConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdFilterConditions.Merge(dst, src)
}
func (m *TrdFilterConditions) XXX_Size() int {
	return xxx_messageInfo_TrdFilterConditions.Size(m)
}
func (m *TrdFilterConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdFilterConditions.DiscardUnknown(m)
}

var xxx_messageInfo_TrdFilterConditions proto.InternalMessageInfo

func (m *TrdFilterConditions) GetCodeList() []string {
	if m != nil {
		return m.CodeList
	}
	return nil
}

func (m *TrdFilterConditions) GetIdList() []uint64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

func (m *TrdFilterConditions) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *TrdFilterConditions) GetEndTime() string {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return ""
}

func init() {
	proto.RegisterType((*TrdHeader)(nil), "Trd_Common.TrdHeader")
	proto.RegisterType((*TrdAcc)(nil), "Trd_Common.TrdAcc")
	proto.RegisterType((*Funds)(nil), "Trd_Common.Funds")
	proto.RegisterType((*Position)(nil), "Trd_Common.Position")
	proto.RegisterType((*Order)(nil), "Trd_Common.Order")
	proto.RegisterType((*OrderFill)(nil), "Trd_Common.OrderFill")
	proto.RegisterType((*TrdFilterConditions)(nil), "Trd_Common.TrdFilterConditions")
	proto.RegisterEnum("Trd_Common.TrdEnv", TrdEnv_name, TrdEnv_value)
	proto.RegisterEnum("Trd_Common.TrdMarket", TrdMarket_name, TrdMarket_value)
	proto.RegisterEnum("Trd_Common.TrdSide", TrdSide_name, TrdSide_value)
	proto.RegisterEnum("Trd_Common.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("Trd_Common.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("Trd_Common.PositionSide", PositionSide_name, PositionSide_value)
	proto.RegisterEnum("Trd_Common.ModifyOrderOp", ModifyOrderOp_name, ModifyOrderOp_value)
	proto.RegisterEnum("Trd_Common.ReconfirmOrderReason", ReconfirmOrderReason_name, ReconfirmOrderReason_value)
}

func init() {
	proto.RegisterFile("Trd_Common/Trd_Common.proto", fileDescriptor_Trd_Common_215a3e1001e11cd9)
}

var fileDescriptor_Trd_Common_215a3e1001e11cd9 = []byte{
	// 1256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdf, 0x52, 0x1b, 0xb7,
	0x17, 0x66, 0xfd, 0x07, 0xf0, 0x81, 0x04, 0x21, 0xc0, 0x18, 0x48, 0xf2, 0xf3, 0xcf, 0xd3, 0xe9,
	0x30, 0x9e, 0x4e, 0xfa, 0x0c, 0xc6, 0xc0, 0x84, 0x29, 0x09, 0x64, 0xed, 0x34, 0x97, 0xae, 0xbc,
	0x12, 0x66, 0x87, 0xf5, 0xae, 0xab, 0xd5, 0x92, 0xb8, 0x77, 0xbd, 0x69, 0x9f, 0xa6, 0x2f, 0xd0,
	0x87, 0xe8, 0x7d, 0xa7, 0xd3, 0x67, 0x69, 0xe7, 0x1c, 0xad, 0xf7, 0x0f, 0x26, 0x99, 0xf6, 0xa2,
	0xbe, 0xd2, 0xf7, 0x7d, 0xd2, 0x39, 0xfa, 0xce, 0x91, 0xb4, 0x86, 0xa3, 0xa1, 0x96, 0xa3, 0x7e,
	0x34, 0x9d, 0x46, 0xe1, 0xd7, 0xf9, 0xf0, 0xe5, 0x4c, 0x47, 0x26, 0xe2, 0x90, 0x33, 0x87, 0x3b,
	0xe9, 0xa4, 0xe2, 0x84, 0xce, 0x7b, 0x68, 0x0c, 0xb5, 0x7c, 0xa5, 0x84, 0x54, 0x9a, 0x37, 0x61,
	0xd5, 0x68, 0x79, 0x16, 0xde, 0xb7, 0x9c, 0x76, 0xe5, 0xb8, 0xee, 0xa6, 0x88, 0xef, 0x42, 0x5d,
	0x78, 0xde, 0xc5, 0x69, 0xab, 0xd2, 0xae, 0x1c, 0xd7, 0x5c, 0x0b, 0xf8, 0x33, 0x68, 0x18, 0x2d,
	0x5f, 0x0b, 0x7d, 0xa7, 0x4c, 0xab, 0x4a, 0x0b, 0x72, 0xa2, 0x23, 0x61, 0x75, 0xa8, 0x65, 0xcf,
	0xf3, 0xfe, 0x65, 0xd4, 0xaf, 0x60, 0x3b, 0x0b, 0xd2, 0x4b, 0xcc, 0xed, 0xa5, 0x1f, 0x63, 0xf4,
	0xea, 0x71, 0xdd, 0x5d, 0x16, 0x3a, 0x7f, 0x38, 0x50, 0x3f, 0x4f, 0x42, 0x19, 0x63, 0xb4, 0x59,
	0xf4, 0x41, 0x69, 0x4a, 0xe2, 0xb8, 0x16, 0xf0, 0x36, 0x6c, 0x98, 0xc8, 0x88, 0xa0, 0x17, 0xc7,
	0xca, 0xc4, 0x94, 0xc9, 0x71, 0x8b, 0x14, 0xe7, 0x50, 0xf3, 0x44, 0x7c, 0x4b, 0x06, 0x1c, 0x97,
	0xc6, 0xe8, 0x6c, 0x4a, 0x79, 0xbe, 0x15, 0x41, 0xab, 0x46, 0x42, 0x4e, 0xf0, 0x17, 0x00, 0x37,
	0x3a, 0xfa, 0x41, 0x85, 0x7d, 0x5c, 0x57, 0x27, 0xb9, 0xc0, 0xf0, 0x43, 0x58, 0x97, 0x6a, 0x6c,
	0x48, 0x5d, 0x25, 0x35, 0xc3, 0xe8, 0x4e, 0xdc, 0x07, 0xef, 0x7d, 0x73, 0x2b, 0xb5, 0xf8, 0x20,
	0x02, 0x9a, 0xb4, 0x46, 0x93, 0x96, 0x85, 0xce, 0x6f, 0x55, 0x58, 0xbf, 0x8e, 0x62, 0xdf, 0xf8,
	0x51, 0x88, 0x69, 0x67, 0xe9, 0xf8, 0xe2, 0x94, 0x5c, 0xd6, 0xdc, 0x02, 0xc3, 0x3b, 0xb0, 0xb9,
	0x40, 0x03, 0x5f, 0x2a, 0xf2, 0x5a, 0x77, 0x4b, 0x1c, 0x99, 0x8d, 0xa4, 0x22, 0xb3, 0x0d, 0x97,
	0xc6, 0xc8, 0x85, 0x62, 0xaa, 0xc8, 0x67, 0xc3, 0xa5, 0x31, 0x67, 0x50, 0xfd, 0xde, 0xcc, 0x53,
	0x6f, 0x38, 0xc4, 0xec, 0x9e, 0x08, 0x07, 0x2a, 0x08, 0xde, 0x9a, 0x79, 0x6a, 0xab, 0xc0, 0x50,
	0xf9, 0xb5, 0xef, 0xa9, 0xd4, 0x8c, 0x05, 0x58, 0x48, 0x2f, 0x8a, 0xcd, 0x35, 0x29, 0xeb, 0x6d,
	0x07, 0x0b, 0x99, 0x11, 0x98, 0xe5, 0x5e, 0x04, 0xad, 0x86, 0xcd, 0x72, 0x2f, 0x02, 0x8a, 0x12,
	0x60, 0xd1, 0x21, 0x8d, 0x82, 0x80, 0xb7, 0x60, 0x6d, 0x16, 0xb8, 0xc2, 0xf8, 0x51, 0x6b, 0x83,
	0x62, 0x2c, 0x20, 0x3f, 0x80, 0x75, 0x23, 0x47, 0x76, 0xc9, 0x9e, 0x95, 0x8c, 0xbc, 0xa6, 0x45,
	0x47, 0xd0, 0x30, 0x72, 0x64, 0xb4, 0x44, 0xad, 0x49, 0xda, 0xba, 0x91, 0x43, 0xc2, 0xa9, 0x38,
	0x4e, 0xe6, 0x28, 0xee, 0x2f, 0xc4, 0x13, 0xc2, 0xb9, 0x88, 0x4e, 0x5b, 0x05, 0x11, 0x7d, 0x3e,
	0x07, 0x30, 0x72, 0x14, 0xab, 0x80, 0x72, 0x1e, 0x58, 0x4b, 0x46, 0x0e, 0x2c, 0x51, 0x90, 0x71,
	0xf1, 0x61, 0x51, 0x7e, 0x6b, 0xe6, 0x9d, 0x9f, 0xab, 0x50, 0xbf, 0xd2, 0x78, 0xd5, 0x5a, 0xb0,
	0x66, 0xb4, 0xa4, 0x46, 0xd9, 0x5b, 0xb1, 0x80, 0x58, 0xb3, 0x08, 0xa7, 0x0c, 0xe7, 0xb3, 0x45,
	0x13, 0x73, 0x02, 0x0f, 0x34, 0x81, 0x81, 0x11, 0x26, 0x89, 0xd3, 0x6b, 0x57, 0xa4, 0x30, 0x32,
	0xc1, 0x8b, 0x53, 0x6a, 0x69, 0xcd, 0x5d, 0xc0, 0x2c, 0xf2, 0xc5, 0xe9, 0xd9, 0x47, 0xea, 0x6d,
	0xc3, 0xcd, 0x89, 0xec, 0x6c, 0xac, 0x3e, 0x72, 0x36, 0xd6, 0x96, 0xcf, 0xc6, 0x7a, 0x7e, 0x36,
	0xb2, 0xde, 0x37, 0xc8, 0x6f, 0xda, 0x7b, 0x3c, 0x31, 0x5a, 0x09, 0xa3, 0x86, 0xfe, 0x54, 0x51,
	0x43, 0x1b, 0x6e, 0x81, 0x41, 0x3d, 0x99, 0xc9, 0x85, 0xbe, 0x61, 0xf5, 0x9c, 0x41, 0x1f, 0x37,
	0xbe, 0xad, 0xe3, 0xa6, 0x6d, 0x6d, 0x0a, 0xf1, 0xa4, 0xe3, 0xb0, 0x77, 0x3f, 0xb1, 0x07, 0xeb,
	0x09, 0xc9, 0x25, 0x0e, 0xa3, 0x07, 0x22, 0x36, 0x67, 0x5a, 0xbf, 0x8e, 0x27, 0xad, 0xa7, 0x6d,
	0x07, 0xa3, 0xe7, 0x4c, 0xe7, 0xf7, 0x0a, 0x34, 0xa8, 0x13, 0xe7, 0x7e, 0x10, 0x7c, 0xa6, 0x1b,
	0x4d, 0x58, 0xc5, 0xb8, 0xd9, 0x2b, 0x95, 0x22, 0xbc, 0xe4, 0x76, 0x74, 0xf6, 0x31, 0xbd, 0x4d,
	0x19, 0x2e, 0x77, 0xc0, 0xf9, 0x4c, 0x07, 0x9c, 0xff, 0xa0, 0x03, 0x95, 0x7f, 0xde, 0x81, 0x63,
	0xd8, 0xf2, 0xa2, 0x24, 0x34, 0x4a, 0x9f, 0xe8, 0xe8, 0x8e, 0xf6, 0x8b, 0xf7, 0xab, 0xee, 0x3e,
	0xa4, 0xf1, 0xd9, 0x2a, 0x51, 0x6f, 0x70, 0x4b, 0x9b, 0xb4, 0xff, 0x65, 0xa1, 0xf3, 0xa3, 0x03,
	0x3b, 0x43, 0x2d, 0xcf, 0xfd, 0xc0, 0x28, 0xdd, 0x8f, 0x42, 0x49, 0x0f, 0x50, 0x8c, 0x35, 0x43,
	0x4f, 0xf4, 0xa2, 0x3b, 0xed, 0x2a, 0xd6, 0x6c, 0x81, 0xb1, 0xce, 0xbe, 0x24, 0xa5, 0xd2, 0xae,
	0x62, 0x9d, 0x2d, 0xc2, 0x8a, 0x8d, 0xd5, 0xc4, 0x0f, 0xc9, 0x42, 0xd5, 0x56, 0x2c, 0x23, 0xb0,
	0xd2, 0x2a, 0x94, 0xa4, 0xd5, 0x48, 0x5b, 0xc0, 0xee, 0x4b, 0xfa, 0xfc, 0xe0, 0x67, 0x66, 0x07,
	0xb6, 0xec, 0x68, 0x34, 0xf0, 0xa7, 0x49, 0x20, 0x8c, 0x62, 0x2b, 0x7c, 0x0b, 0x36, 0x52, 0xd2,
	0x55, 0x22, 0x60, 0x4e, 0x37, 0xa0, 0xef, 0xa0, 0xfd, 0xba, 0xf0, 0x3d, 0xd8, 0xce, 0xc0, 0xe8,
	0x5d, 0x78, 0x17, 0x46, 0x1f, 0x42, 0xb6, 0xc2, 0x19, 0x6c, 0xe6, 0xf4, 0xab, 0x6f, 0x98, 0x53,
	0x66, 0xde, 0x0d, 0x58, 0xa5, 0xcc, 0xf4, 0xdf, 0xb0, 0x2a, 0xe7, 0xf0, 0xb4, 0xb8, 0xaa, 0xdf,
	0x67, 0xb5, 0xee, 0x14, 0xd6, 0x86, 0xe9, 0x01, 0xb3, 0xdb, 0xc3, 0x61, 0x21, 0x93, 0xdd, 0x1e,
	0x91, 0x27, 0xc9, 0x3c, 0x4b, 0x44, 0x04, 0xbe, 0x25, 0xac, 0x92, 0xee, 0x31, 0x63, 0x06, 0xb7,
	0x91, 0x36, 0xac, 0x5a, 0x0c, 0x77, 0x92, 0xcc, 0x4f, 0x84, 0x77, 0xc7, 0x6a, 0xdd, 0x5f, 0x9d,
	0xf4, 0xb0, 0xd3, 0x13, 0xb2, 0x07, 0xdb, 0x19, 0x28, 0xe4, 0xdc, 0x05, 0x96, 0xd3, 0x6f, 0x22,
	0x3d, 0xc5, 0xba, 0x94, 0x59, 0x6b, 0x82, 0x55, 0xf8, 0x11, 0xec, 0xe7, 0x6c, 0x6f, 0x1c, 0x47,
	0x41, 0x62, 0xd4, 0xa5, 0x3f, 0xf5, 0x0d, 0xab, 0x97, 0xe3, 0xf7, 0x12, 0x0f, 0x9b, 0xcf, 0x56,
	0xf9, 0x21, 0x34, 0x97, 0x68, 0xbb, 0x64, 0xad, 0xac, 0x0d, 0x66, 0xca, 0xf3, 0x45, 0x60, 0xb5,
	0xf5, 0xee, 0x9f, 0x55, 0xd8, 0xb8, 0x2a, 0xbc, 0x6f, 0x8b, 0xdc, 0x16, 0x8e, 0xde, 0x85, 0x71,
	0x32, 0x9e, 0xfa, 0xc6, 0x28, 0xc9, 0x56, 0x78, 0x1b, 0x76, 0xca, 0xa2, 0x75, 0xf7, 0xd7, 0xe2,
	0xe7, 0xf0, 0xe7, 0x70, 0x50, 0x9c, 0xf1, 0x5e, 0xf8, 0xc6, 0x0f, 0x27, 0x03, 0x8a, 0xc1, 0x9c,
	0x6c, 0x27, 0xa9, 0x6c, 0x79, 0x9c, 0xc1, 0x2a, 0xfc, 0x19, 0xb4, 0x96, 0xb5, 0x73, 0xe1, 0x07,
	0x4a, 0xb2, 0x2a, 0xdf, 0x2f, 0xa7, 0xc6, 0x53, 0x78, 0x95, 0x18, 0x56, 0xe3, 0x07, 0xb0, 0xf7,
	0x48, 0x48, 0x25, 0x59, 0xfd, 0xa1, 0x17, 0x7c, 0x8b, 0x94, 0x1c, 0x5d, 0x0b, 0x6d, 0x18, 0x3c,
	0xdc, 0x4a, 0x2a, 0xf6, 0x82, 0x80, 0x6d, 0xf0, 0xff, 0xc1, 0x51, 0x51, 0xeb, 0x8b, 0xd0, 0x53,
	0x41, 0xe0, 0x87, 0x13, 0xbb, 0x78, 0x93, 0xbf, 0x80, 0xc3, 0x4f, 0x4c, 0xc0, 0x00, 0x4f, 0x3e,
	0xa1, 0x2f, 0x92, 0x3f, 0x7d, 0x58, 0xa6, 0x5c, 0xc7, 0xe5, 0x5b, 0xbc, 0x09, 0xbc, 0xb4, 0x37,
	0x5b, 0x84, 0x3d, 0xde, 0x82, 0xdd, 0x22, 0x7f, 0xea, 0xc7, 0x62, 0x8c, 0x4a, 0xf3, 0x61, 0x79,
	0x4e, 0x55, 0xa0, 0xb0, 0x06, 0xfb, 0xdd, 0xef, 0x60, 0xf3, 0xba, 0xf8, 0x1f, 0x65, 0x0f, 0xb6,
	0x8b, 0x78, 0x74, 0x19, 0x85, 0x13, 0xb6, 0xc2, 0xff, 0x0f, 0xbb, 0x25, 0xfa, 0x91, 0xd6, 0x36,
	0x81, 0x97, 0xa6, 0xd8, 0x3b, 0xe1, 0x74, 0x7f, 0x71, 0xe0, 0xc9, 0xeb, 0x48, 0xfa, 0x37, 0x73,
	0xda, 0xc1, 0xd5, 0x0c, 0x5b, 0x52, 0x22, 0x0a, 0xd7, 0xa0, 0x05, 0xbb, 0x65, 0x29, 0xbb, 0x0a,
	0x4b, 0x8a, 0x2d, 0x0a, 0xab, 0x2c, 0x87, 0x4b, 0x7d, 0xb3, 0xea, 0xf2, 0xa2, 0xb3, 0x90, 0x94,
	0xda, 0xb2, 0x62, 0x4b, 0xc2, 0xea, 0xdd, 0x9f, 0x1c, 0xd8, 0x75, 0x95, 0x17, 0x85, 0x37, 0xbe,
	0x9e, 0x92, 0xea, 0x2a, 0x11, 0x47, 0x21, 0x6f, 0xc3, 0xb3, 0xc7, 0xf8, 0xc2, 0xee, 0xbf, 0x80,
	0xf6, 0xa3, 0x33, 0xde, 0x9a, 0xf9, 0x30, 0x8a, 0x2e, 0x85, 0x9e, 0x28, 0xe6, 0xf0, 0x2f, 0xa1,
	0xf3, 0xe8, 0x2c, 0xfa, 0x74, 0xf6, 0xc6, 0xa1, 0x75, 0x5c, 0xf9, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x96, 0x1a, 0xd1, 0xba, 0x5b, 0x0c, 0x00, 0x00,
}
